/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface PublicResolverInterface extends Interface {
  functions: {
    supportsInterface: TypedFunctionDescription<{
      encode([interfaceID]: [Arrayish]): string;
    }>;

    setDNSRecords: TypedFunctionDescription<{
      encode([node, data]: [Arrayish, Arrayish]): string;
    }>;

    setText: TypedFunctionDescription<{
      encode([node, key, value]: [Arrayish, string, string]): string;
    }>;

    interfaceImplementer: TypedFunctionDescription<{
      encode([node, interfaceID]: [Arrayish, Arrayish]): string;
    }>;

    ABI: TypedFunctionDescription<{
      encode([node, contentTypes]: [Arrayish, BigNumberish]): string;
    }>;

    setPubkey: TypedFunctionDescription<{
      encode([node, x, y]: [Arrayish, Arrayish, Arrayish]): string;
    }>;

    setContenthash: TypedFunctionDescription<{
      encode([node, hash]: [Arrayish, Arrayish]): string;
    }>;

    addr: TypedFunctionDescription<{ encode([node]: [Arrayish]): string }>;

    hasDNSRecords: TypedFunctionDescription<{
      encode([node, name]: [Arrayish, Arrayish]): string;
    }>;

    text: TypedFunctionDescription<{
      encode([node, key]: [Arrayish, string]): string;
    }>;

    setABI: TypedFunctionDescription<{
      encode([node, contentType, data]: [
        Arrayish,
        BigNumberish,
        Arrayish
      ]): string;
    }>;

    name: TypedFunctionDescription<{ encode([node]: [Arrayish]): string }>;

    setName: TypedFunctionDescription<{
      encode([node, name]: [Arrayish, string]): string;
    }>;

    setAddr: TypedFunctionDescription<{
      encode([node, coinType, a]: [Arrayish, BigNumberish, Arrayish]): string;
    }>;

    dnsRecord: TypedFunctionDescription<{
      encode([node, name, resource]: [
        Arrayish,
        Arrayish,
        BigNumberish
      ]): string;
    }>;

    clearDNSZone: TypedFunctionDescription<{
      encode([node]: [Arrayish]): string;
    }>;

    contenthash: TypedFunctionDescription<{
      encode([node]: [Arrayish]): string;
    }>;

    pubkey: TypedFunctionDescription<{ encode([node]: [Arrayish]): string }>;

    setInterface: TypedFunctionDescription<{
      encode([node, interfaceID, implementer]: [
        Arrayish,
        Arrayish,
        string
      ]): string;
    }>;

    authorisations: TypedFunctionDescription<{
      encode([, ,]: [Arrayish, string, string]): string;
    }>;

    setAuthorisation: TypedFunctionDescription<{
      encode([node, target, isAuthorised]: [Arrayish, string, boolean]): string;
    }>;

    multicall: TypedFunctionDescription<{
      encode([data]: [Arrayish[]]): string;
    }>;
  };

  events: {
    AuthorisationChanged: TypedEventDescription<{
      encodeTopics([node, owner, target, isAuthorised]: [
        Arrayish | null,
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    TextChanged: TypedEventDescription<{
      encodeTopics([node, indexedKey, key]: [
        Arrayish | null,
        string | null,
        null
      ]): string[];
    }>;

    PubkeyChanged: TypedEventDescription<{
      encodeTopics([node, x, y]: [Arrayish | null, null, null]): string[];
    }>;

    NameChanged: TypedEventDescription<{
      encodeTopics([node, name]: [Arrayish | null, null]): string[];
    }>;

    InterfaceChanged: TypedEventDescription<{
      encodeTopics([node, interfaceID, implementer]: [
        Arrayish | null,
        Arrayish | null,
        null
      ]): string[];
    }>;

    DNSRecordChanged: TypedEventDescription<{
      encodeTopics([node, name, resource, record]: [
        Arrayish | null,
        null,
        null,
        null
      ]): string[];
    }>;

    DNSRecordDeleted: TypedEventDescription<{
      encodeTopics([node, name, resource]: [
        Arrayish | null,
        null,
        null
      ]): string[];
    }>;

    DNSZoneCleared: TypedEventDescription<{
      encodeTopics([node]: [Arrayish | null]): string[];
    }>;

    ContenthashChanged: TypedEventDescription<{
      encodeTopics([node, hash]: [Arrayish | null, null]): string[];
    }>;

    AddrChanged: TypedEventDescription<{
      encodeTopics([node, a]: [Arrayish | null, null]): string[];
    }>;

    AddressChanged: TypedEventDescription<{
      encodeTopics([node, coinType, newAddress]: [
        Arrayish | null,
        null,
        null
      ]): string[];
    }>;

    ABIChanged: TypedEventDescription<{
      encodeTopics([node, contentType]: [
        Arrayish | null,
        BigNumberish | null
      ]): string[];
    }>;
  };
}

export class PublicResolver extends Contract {
  connect(signerOrProvider: Signer | Provider | string): PublicResolver;
  attach(addressOrName: string): PublicResolver;
  deployed(): Promise<PublicResolver>;

  on(event: EventFilter | string, listener: Listener): PublicResolver;
  once(event: EventFilter | string, listener: Listener): PublicResolver;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): PublicResolver;
  removeAllListeners(eventName: EventFilter | string): PublicResolver;
  removeListener(eventName: any, listener: Listener): PublicResolver;

  interface: PublicResolverInterface;

  functions: {
    supportsInterface(
      interfaceID: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceID: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    /**
     * Set one or more DNS records.  Records are supplied in wire-format. Records with the same node/name/resource must be supplied one after the other to ensure the data is updated correctly. For example, if the data was supplied:    a.example.com IN A 1.2.3.4    a.example.com IN A 5.6.7.8    www.example.com IN CNAME a.example.com. then this would store the two A records for a.example.com correctly as a single RRSET, however if the data was supplied:    a.example.com IN A 1.2.3.4    www.example.com IN CNAME a.example.com.    a.example.com IN A 5.6.7.8 then this would store the first A record, the CNAME, then the second A record which would overwrite the first.
     * @param data the DNS wire format records to set
     * @param node the namehash of the node for which to set the records
     */
    setDNSRecords(
      node: Arrayish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Set one or more DNS records.  Records are supplied in wire-format. Records with the same node/name/resource must be supplied one after the other to ensure the data is updated correctly. For example, if the data was supplied:    a.example.com IN A 1.2.3.4    a.example.com IN A 5.6.7.8    www.example.com IN CNAME a.example.com. then this would store the two A records for a.example.com correctly as a single RRSET, however if the data was supplied:    a.example.com IN A 1.2.3.4    www.example.com IN CNAME a.example.com.    a.example.com IN A 5.6.7.8 then this would store the first A record, the CNAME, then the second A record which would overwrite the first.
     * @param data the DNS wire format records to set
     * @param node the namehash of the node for which to set the records
     */
    "setDNSRecords(bytes32,bytes)"(
      node: Arrayish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Sets the text data associated with an ENS node and key. May only be called by the owner of that node in the ENS registry.
     * @param key The key to set.
     * @param node The node to update.
     * @param value The text data value to set.
     */
    setText(
      node: Arrayish,
      key: string,
      value: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Sets the text data associated with an ENS node and key. May only be called by the owner of that node in the ENS registry.
     * @param key The key to set.
     * @param node The node to update.
     * @param value The text data value to set.
     */
    "setText(bytes32,string,string)"(
      node: Arrayish,
      key: string,
      value: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Returns the address of a contract that implements the specified interface for this name. If an implementer has not been set for this interfaceID and name, the resolver will query the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that contract implements EIP168 and returns `true` for the specified interfaceID, its address will be returned.
     * @param interfaceID The EIP 168 interface ID to check for.
     * @param node The ENS node to query.
     * @returns The address that implements this interface, or 0 if the interface is unsupported.
     */
    interfaceImplementer(
      node: Arrayish,
      interfaceID: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    /**
     * Returns the address of a contract that implements the specified interface for this name. If an implementer has not been set for this interfaceID and name, the resolver will query the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that contract implements EIP168 and returns `true` for the specified interfaceID, its address will be returned.
     * @param interfaceID The EIP 168 interface ID to check for.
     * @param node The ENS node to query.
     * @returns The address that implements this interface, or 0 if the interface is unsupported.
     */
    "interfaceImplementer(bytes32,bytes4)"(
      node: Arrayish,
      interfaceID: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    /**
     * Returns the ABI associated with an ENS node. Defined in EIP205.
     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.
     * @param node The ENS node to query
     * @returns contentType The content type of the return valuedata The ABI data
     */
    ABI(
      node: Arrayish,
      contentTypes: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<{
      0: BigNumber;
      1: string;
    }>;

    /**
     * Returns the ABI associated with an ENS node. Defined in EIP205.
     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.
     * @param node The ENS node to query
     * @returns contentType The content type of the return valuedata The ABI data
     */
    "ABI(bytes32,uint256)"(
      node: Arrayish,
      contentTypes: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<{
      0: BigNumber;
      1: string;
    }>;

    /**
     * Sets the SECP256k1 public key associated with an ENS node.
     * @param node The ENS node to query
     * @param x the X coordinate of the curve point for the public key.
     * @param y the Y coordinate of the curve point for the public key.
     */
    setPubkey(
      node: Arrayish,
      x: Arrayish,
      y: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Sets the SECP256k1 public key associated with an ENS node.
     * @param node The ENS node to query
     * @param x the X coordinate of the curve point for the public key.
     * @param y the Y coordinate of the curve point for the public key.
     */
    "setPubkey(bytes32,bytes32,bytes32)"(
      node: Arrayish,
      x: Arrayish,
      y: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Sets the contenthash associated with an ENS node. May only be called by the owner of that node in the ENS registry.
     * @param hash The contenthash to set
     * @param node The node to update.
     */
    setContenthash(
      node: Arrayish,
      hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Sets the contenthash associated with an ENS node. May only be called by the owner of that node in the ENS registry.
     * @param hash The contenthash to set
     * @param node The node to update.
     */
    "setContenthash(bytes32,bytes)"(
      node: Arrayish,
      hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Returns the address associated with an ENS node.
     * @param node The ENS node to query.
     * @returns The associated address.
     */
    addr(node: Arrayish, overrides?: TransactionOverrides): Promise<string>;

    /**
     * Returns the address associated with an ENS node.
     * @param node The ENS node to query.
     * @returns The associated address.
     */
    "addr(bytes32)"(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "addr(bytes32,uint256)"(
      node: Arrayish,
      coinType: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    /**
     * Check if a given node has records.
     * @param name the namehash of the node for which to check the records
     * @param node the namehash of the node for which to check the records
     */
    hasDNSRecords(
      node: Arrayish,
      name: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    /**
     * Check if a given node has records.
     * @param name the namehash of the node for which to check the records
     * @param node the namehash of the node for which to check the records
     */
    "hasDNSRecords(bytes32,bytes32)"(
      node: Arrayish,
      name: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    /**
     * Returns the text data associated with an ENS node and key.
     * @param key The text data key to query.
     * @param node The ENS node to query.
     * @returns The associated text data.
     */
    text(
      node: Arrayish,
      key: string,
      overrides?: TransactionOverrides
    ): Promise<string>;

    /**
     * Returns the text data associated with an ENS node and key.
     * @param key The text data key to query.
     * @param node The ENS node to query.
     * @returns The associated text data.
     */
    "text(bytes32,string)"(
      node: Arrayish,
      key: string,
      overrides?: TransactionOverrides
    ): Promise<string>;

    /**
     * Sets the ABI associated with an ENS node. Nodes may have one ABI of each content type. To remove an ABI, set it to the empty string.
     * @param contentType The content type of the ABI
     * @param data The ABI data.
     * @param node The node to update.
     */
    setABI(
      node: Arrayish,
      contentType: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Sets the ABI associated with an ENS node. Nodes may have one ABI of each content type. To remove an ABI, set it to the empty string.
     * @param contentType The content type of the ABI
     * @param data The ABI data.
     * @param node The node to update.
     */
    "setABI(bytes32,uint256,bytes)"(
      node: Arrayish,
      contentType: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Returns the name associated with an ENS node, for reverse records. Defined in EIP181.
     * @param node The ENS node to query.
     * @returns The associated name.
     */
    name(node: Arrayish, overrides?: TransactionOverrides): Promise<string>;

    /**
     * Returns the name associated with an ENS node, for reverse records. Defined in EIP181.
     * @param node The ENS node to query.
     * @returns The associated name.
     */
    "name(bytes32)"(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    /**
     * Sets the name associated with an ENS node, for reverse records. May only be called by the owner of that node in the ENS registry.
     * @param name The name to set.
     * @param node The node to update.
     */
    setName(
      node: Arrayish,
      name: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Sets the name associated with an ENS node, for reverse records. May only be called by the owner of that node in the ENS registry.
     * @param name The name to set.
     * @param node The node to update.
     */
    "setName(bytes32,string)"(
      node: Arrayish,
      name: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setAddr(
      node: Arrayish,
      coinType: BigNumberish,
      a: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setAddr(bytes32,uint256,bytes)"(
      node: Arrayish,
      coinType: BigNumberish,
      a: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Sets the address associated with an ENS node. May only be called by the owner of that node in the ENS registry.
     * @param a The address to set.
     * @param node The node to update.
     */
    "setAddr(bytes32,address)"(
      node: Arrayish,
      a: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Obtain a DNS record.
     * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record
     * @param node the namehash of the node for which to fetch the record
     * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types
     * @returns the DNS record in wire format if present, otherwise empty
     */
    dnsRecord(
      node: Arrayish,
      name: Arrayish,
      resource: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    /**
     * Obtain a DNS record.
     * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record
     * @param node the namehash of the node for which to fetch the record
     * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types
     * @returns the DNS record in wire format if present, otherwise empty
     */
    "dnsRecord(bytes32,bytes32,uint16)"(
      node: Arrayish,
      name: Arrayish,
      resource: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    /**
     * Clear all information for a DNS zone.
     * @param node the namehash of the node for which to clear the zone
     */
    clearDNSZone(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Clear all information for a DNS zone.
     * @param node the namehash of the node for which to clear the zone
     */
    "clearDNSZone(bytes32)"(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Returns the contenthash associated with an ENS node.
     * @param node The ENS node to query.
     * @returns The associated contenthash.
     */
    contenthash(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    /**
     * Returns the contenthash associated with an ENS node.
     * @param node The ENS node to query.
     * @returns The associated contenthash.
     */
    "contenthash(bytes32)"(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    /**
     * Returns the SECP256k1 public key associated with an ENS node. Defined in EIP 619.
     * @param node The ENS node to query
     * @returns x, y the X and Y coordinates of the curve point for the public key.
     */
    pubkey(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<{
      x: string;
      y: string;
      0: string;
      1: string;
    }>;

    /**
     * Returns the SECP256k1 public key associated with an ENS node. Defined in EIP 619.
     * @param node The ENS node to query
     * @returns x, y the X and Y coordinates of the curve point for the public key.
     */
    "pubkey(bytes32)"(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<{
      x: string;
      y: string;
      0: string;
      1: string;
    }>;

    /**
     * Sets an interface associated with a name. Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support.
     * @param implementer The address of a contract that implements this interface for this node.
     * @param interfaceID The EIP 168 interface ID.
     * @param node The node to update.
     */
    setInterface(
      node: Arrayish,
      interfaceID: Arrayish,
      implementer: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Sets an interface associated with a name. Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support.
     * @param implementer The address of a contract that implements this interface for this node.
     * @param interfaceID The EIP 168 interface ID.
     * @param node The node to update.
     */
    "setInterface(bytes32,bytes4,address)"(
      node: Arrayish,
      interfaceID: Arrayish,
      implementer: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    authorisations(
      arg0: Arrayish,
      arg1: string,
      arg2: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    "authorisations(bytes32,address,address)"(
      arg0: Arrayish,
      arg1: string,
      arg2: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    /**
     * Sets or clears an authorisation. Authorisations are specific to the caller. Any account can set an authorisation for any name, but the authorisation that is checked will be that of the current owner of a name. Thus, transferring a name effectively clears any existing authorisations, and new authorisations can be set in advance of an ownership transfer if desired.
     * @param isAuthorised True if the address should be authorised, or false if it should be deauthorised.
     * @param node The name to change the authorisation on.
     * @param target The address that is to be authorised or deauthorised.
     */
    setAuthorisation(
      node: Arrayish,
      target: string,
      isAuthorised: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Sets or clears an authorisation. Authorisations are specific to the caller. Any account can set an authorisation for any name, but the authorisation that is checked will be that of the current owner of a name. Thus, transferring a name effectively clears any existing authorisations, and new authorisations can be set in advance of an ownership transfer if desired.
     * @param isAuthorised True if the address should be authorised, or false if it should be deauthorised.
     * @param node The name to change the authorisation on.
     * @param target The address that is to be authorised or deauthorised.
     */
    "setAuthorisation(bytes32,address,bool)"(
      node: Arrayish,
      target: string,
      isAuthorised: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    multicall(
      data: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "multicall(bytes[])"(
      data: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  supportsInterface(
    interfaceID: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceID: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  /**
   * Set one or more DNS records.  Records are supplied in wire-format. Records with the same node/name/resource must be supplied one after the other to ensure the data is updated correctly. For example, if the data was supplied:    a.example.com IN A 1.2.3.4    a.example.com IN A 5.6.7.8    www.example.com IN CNAME a.example.com. then this would store the two A records for a.example.com correctly as a single RRSET, however if the data was supplied:    a.example.com IN A 1.2.3.4    www.example.com IN CNAME a.example.com.    a.example.com IN A 5.6.7.8 then this would store the first A record, the CNAME, then the second A record which would overwrite the first.
   * @param data the DNS wire format records to set
   * @param node the namehash of the node for which to set the records
   */
  setDNSRecords(
    node: Arrayish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Set one or more DNS records.  Records are supplied in wire-format. Records with the same node/name/resource must be supplied one after the other to ensure the data is updated correctly. For example, if the data was supplied:    a.example.com IN A 1.2.3.4    a.example.com IN A 5.6.7.8    www.example.com IN CNAME a.example.com. then this would store the two A records for a.example.com correctly as a single RRSET, however if the data was supplied:    a.example.com IN A 1.2.3.4    www.example.com IN CNAME a.example.com.    a.example.com IN A 5.6.7.8 then this would store the first A record, the CNAME, then the second A record which would overwrite the first.
   * @param data the DNS wire format records to set
   * @param node the namehash of the node for which to set the records
   */
  "setDNSRecords(bytes32,bytes)"(
    node: Arrayish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Sets the text data associated with an ENS node and key. May only be called by the owner of that node in the ENS registry.
   * @param key The key to set.
   * @param node The node to update.
   * @param value The text data value to set.
   */
  setText(
    node: Arrayish,
    key: string,
    value: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Sets the text data associated with an ENS node and key. May only be called by the owner of that node in the ENS registry.
   * @param key The key to set.
   * @param node The node to update.
   * @param value The text data value to set.
   */
  "setText(bytes32,string,string)"(
    node: Arrayish,
    key: string,
    value: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Returns the address of a contract that implements the specified interface for this name. If an implementer has not been set for this interfaceID and name, the resolver will query the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that contract implements EIP168 and returns `true` for the specified interfaceID, its address will be returned.
   * @param interfaceID The EIP 168 interface ID to check for.
   * @param node The ENS node to query.
   * @returns The address that implements this interface, or 0 if the interface is unsupported.
   */
  interfaceImplementer(
    node: Arrayish,
    interfaceID: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  /**
   * Returns the address of a contract that implements the specified interface for this name. If an implementer has not been set for this interfaceID and name, the resolver will query the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that contract implements EIP168 and returns `true` for the specified interfaceID, its address will be returned.
   * @param interfaceID The EIP 168 interface ID to check for.
   * @param node The ENS node to query.
   * @returns The address that implements this interface, or 0 if the interface is unsupported.
   */
  "interfaceImplementer(bytes32,bytes4)"(
    node: Arrayish,
    interfaceID: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  /**
   * Returns the ABI associated with an ENS node. Defined in EIP205.
   * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.
   * @param node The ENS node to query
   * @returns contentType The content type of the return valuedata The ABI data
   */
  ABI(
    node: Arrayish,
    contentTypes: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<{
    0: BigNumber;
    1: string;
  }>;

  /**
   * Returns the ABI associated with an ENS node. Defined in EIP205.
   * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.
   * @param node The ENS node to query
   * @returns contentType The content type of the return valuedata The ABI data
   */
  "ABI(bytes32,uint256)"(
    node: Arrayish,
    contentTypes: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<{
    0: BigNumber;
    1: string;
  }>;

  /**
   * Sets the SECP256k1 public key associated with an ENS node.
   * @param node The ENS node to query
   * @param x the X coordinate of the curve point for the public key.
   * @param y the Y coordinate of the curve point for the public key.
   */
  setPubkey(
    node: Arrayish,
    x: Arrayish,
    y: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Sets the SECP256k1 public key associated with an ENS node.
   * @param node The ENS node to query
   * @param x the X coordinate of the curve point for the public key.
   * @param y the Y coordinate of the curve point for the public key.
   */
  "setPubkey(bytes32,bytes32,bytes32)"(
    node: Arrayish,
    x: Arrayish,
    y: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Sets the contenthash associated with an ENS node. May only be called by the owner of that node in the ENS registry.
   * @param hash The contenthash to set
   * @param node The node to update.
   */
  setContenthash(
    node: Arrayish,
    hash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Sets the contenthash associated with an ENS node. May only be called by the owner of that node in the ENS registry.
   * @param hash The contenthash to set
   * @param node The node to update.
   */
  "setContenthash(bytes32,bytes)"(
    node: Arrayish,
    hash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Returns the address associated with an ENS node.
   * @param node The ENS node to query.
   * @returns The associated address.
   */
  addr(node: Arrayish, overrides?: TransactionOverrides): Promise<string>;

  /**
   * Returns the address associated with an ENS node.
   * @param node The ENS node to query.
   * @returns The associated address.
   */
  "addr(bytes32)"(
    node: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  "addr(bytes32,uint256)"(
    node: Arrayish,
    coinType: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  /**
   * Check if a given node has records.
   * @param name the namehash of the node for which to check the records
   * @param node the namehash of the node for which to check the records
   */
  hasDNSRecords(
    node: Arrayish,
    name: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  /**
   * Check if a given node has records.
   * @param name the namehash of the node for which to check the records
   * @param node the namehash of the node for which to check the records
   */
  "hasDNSRecords(bytes32,bytes32)"(
    node: Arrayish,
    name: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  /**
   * Returns the text data associated with an ENS node and key.
   * @param key The text data key to query.
   * @param node The ENS node to query.
   * @returns The associated text data.
   */
  text(
    node: Arrayish,
    key: string,
    overrides?: TransactionOverrides
  ): Promise<string>;

  /**
   * Returns the text data associated with an ENS node and key.
   * @param key The text data key to query.
   * @param node The ENS node to query.
   * @returns The associated text data.
   */
  "text(bytes32,string)"(
    node: Arrayish,
    key: string,
    overrides?: TransactionOverrides
  ): Promise<string>;

  /**
   * Sets the ABI associated with an ENS node. Nodes may have one ABI of each content type. To remove an ABI, set it to the empty string.
   * @param contentType The content type of the ABI
   * @param data The ABI data.
   * @param node The node to update.
   */
  setABI(
    node: Arrayish,
    contentType: BigNumberish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Sets the ABI associated with an ENS node. Nodes may have one ABI of each content type. To remove an ABI, set it to the empty string.
   * @param contentType The content type of the ABI
   * @param data The ABI data.
   * @param node The node to update.
   */
  "setABI(bytes32,uint256,bytes)"(
    node: Arrayish,
    contentType: BigNumberish,
    data: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Returns the name associated with an ENS node, for reverse records. Defined in EIP181.
   * @param node The ENS node to query.
   * @returns The associated name.
   */
  name(node: Arrayish, overrides?: TransactionOverrides): Promise<string>;

  /**
   * Returns the name associated with an ENS node, for reverse records. Defined in EIP181.
   * @param node The ENS node to query.
   * @returns The associated name.
   */
  "name(bytes32)"(
    node: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  /**
   * Sets the name associated with an ENS node, for reverse records. May only be called by the owner of that node in the ENS registry.
   * @param name The name to set.
   * @param node The node to update.
   */
  setName(
    node: Arrayish,
    name: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Sets the name associated with an ENS node, for reverse records. May only be called by the owner of that node in the ENS registry.
   * @param name The name to set.
   * @param node The node to update.
   */
  "setName(bytes32,string)"(
    node: Arrayish,
    name: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setAddr(
    node: Arrayish,
    coinType: BigNumberish,
    a: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setAddr(bytes32,uint256,bytes)"(
    node: Arrayish,
    coinType: BigNumberish,
    a: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Sets the address associated with an ENS node. May only be called by the owner of that node in the ENS registry.
   * @param a The address to set.
   * @param node The node to update.
   */
  "setAddr(bytes32,address)"(
    node: Arrayish,
    a: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Obtain a DNS record.
   * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record
   * @param node the namehash of the node for which to fetch the record
   * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types
   * @returns the DNS record in wire format if present, otherwise empty
   */
  dnsRecord(
    node: Arrayish,
    name: Arrayish,
    resource: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  /**
   * Obtain a DNS record.
   * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record
   * @param node the namehash of the node for which to fetch the record
   * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types
   * @returns the DNS record in wire format if present, otherwise empty
   */
  "dnsRecord(bytes32,bytes32,uint16)"(
    node: Arrayish,
    name: Arrayish,
    resource: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  /**
   * Clear all information for a DNS zone.
   * @param node the namehash of the node for which to clear the zone
   */
  clearDNSZone(
    node: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Clear all information for a DNS zone.
   * @param node the namehash of the node for which to clear the zone
   */
  "clearDNSZone(bytes32)"(
    node: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Returns the contenthash associated with an ENS node.
   * @param node The ENS node to query.
   * @returns The associated contenthash.
   */
  contenthash(
    node: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  /**
   * Returns the contenthash associated with an ENS node.
   * @param node The ENS node to query.
   * @returns The associated contenthash.
   */
  "contenthash(bytes32)"(
    node: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  /**
   * Returns the SECP256k1 public key associated with an ENS node. Defined in EIP 619.
   * @param node The ENS node to query
   * @returns x, y the X and Y coordinates of the curve point for the public key.
   */
  pubkey(
    node: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<{
    x: string;
    y: string;
    0: string;
    1: string;
  }>;

  /**
   * Returns the SECP256k1 public key associated with an ENS node. Defined in EIP 619.
   * @param node The ENS node to query
   * @returns x, y the X and Y coordinates of the curve point for the public key.
   */
  "pubkey(bytes32)"(
    node: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<{
    x: string;
    y: string;
    0: string;
    1: string;
  }>;

  /**
   * Sets an interface associated with a name. Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support.
   * @param implementer The address of a contract that implements this interface for this node.
   * @param interfaceID The EIP 168 interface ID.
   * @param node The node to update.
   */
  setInterface(
    node: Arrayish,
    interfaceID: Arrayish,
    implementer: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Sets an interface associated with a name. Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support.
   * @param implementer The address of a contract that implements this interface for this node.
   * @param interfaceID The EIP 168 interface ID.
   * @param node The node to update.
   */
  "setInterface(bytes32,bytes4,address)"(
    node: Arrayish,
    interfaceID: Arrayish,
    implementer: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  authorisations(
    arg0: Arrayish,
    arg1: string,
    arg2: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  "authorisations(bytes32,address,address)"(
    arg0: Arrayish,
    arg1: string,
    arg2: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  /**
   * Sets or clears an authorisation. Authorisations are specific to the caller. Any account can set an authorisation for any name, but the authorisation that is checked will be that of the current owner of a name. Thus, transferring a name effectively clears any existing authorisations, and new authorisations can be set in advance of an ownership transfer if desired.
   * @param isAuthorised True if the address should be authorised, or false if it should be deauthorised.
   * @param node The name to change the authorisation on.
   * @param target The address that is to be authorised or deauthorised.
   */
  setAuthorisation(
    node: Arrayish,
    target: string,
    isAuthorised: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Sets or clears an authorisation. Authorisations are specific to the caller. Any account can set an authorisation for any name, but the authorisation that is checked will be that of the current owner of a name. Thus, transferring a name effectively clears any existing authorisations, and new authorisations can be set in advance of an ownership transfer if desired.
   * @param isAuthorised True if the address should be authorised, or false if it should be deauthorised.
   * @param node The name to change the authorisation on.
   * @param target The address that is to be authorised or deauthorised.
   */
  "setAuthorisation(bytes32,address,bool)"(
    node: Arrayish,
    target: string,
    isAuthorised: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  multicall(
    data: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "multicall(bytes[])"(
    data: Arrayish[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    AuthorisationChanged(
      node: Arrayish | null,
      owner: string | null,
      target: string | null,
      isAuthorised: null
    ): EventFilter;

    TextChanged(
      node: Arrayish | null,
      indexedKey: string | null,
      key: null
    ): EventFilter;

    PubkeyChanged(node: Arrayish | null, x: null, y: null): EventFilter;

    NameChanged(node: Arrayish | null, name: null): EventFilter;

    InterfaceChanged(
      node: Arrayish | null,
      interfaceID: Arrayish | null,
      implementer: null
    ): EventFilter;

    DNSRecordChanged(
      node: Arrayish | null,
      name: null,
      resource: null,
      record: null
    ): EventFilter;

    DNSRecordDeleted(
      node: Arrayish | null,
      name: null,
      resource: null
    ): EventFilter;

    DNSZoneCleared(node: Arrayish | null): EventFilter;

    ContenthashChanged(node: Arrayish | null, hash: null): EventFilter;

    AddrChanged(node: Arrayish | null, a: null): EventFilter;

    AddressChanged(
      node: Arrayish | null,
      coinType: null,
      newAddress: null
    ): EventFilter;

    ABIChanged(
      node: Arrayish | null,
      contentType: BigNumberish | null
    ): EventFilter;
  };

  estimate: {
    supportsInterface(
      interfaceID: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceID: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Set one or more DNS records.  Records are supplied in wire-format. Records with the same node/name/resource must be supplied one after the other to ensure the data is updated correctly. For example, if the data was supplied:    a.example.com IN A 1.2.3.4    a.example.com IN A 5.6.7.8    www.example.com IN CNAME a.example.com. then this would store the two A records for a.example.com correctly as a single RRSET, however if the data was supplied:    a.example.com IN A 1.2.3.4    www.example.com IN CNAME a.example.com.    a.example.com IN A 5.6.7.8 then this would store the first A record, the CNAME, then the second A record which would overwrite the first.
     * @param data the DNS wire format records to set
     * @param node the namehash of the node for which to set the records
     */
    setDNSRecords(
      node: Arrayish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Set one or more DNS records.  Records are supplied in wire-format. Records with the same node/name/resource must be supplied one after the other to ensure the data is updated correctly. For example, if the data was supplied:    a.example.com IN A 1.2.3.4    a.example.com IN A 5.6.7.8    www.example.com IN CNAME a.example.com. then this would store the two A records for a.example.com correctly as a single RRSET, however if the data was supplied:    a.example.com IN A 1.2.3.4    www.example.com IN CNAME a.example.com.    a.example.com IN A 5.6.7.8 then this would store the first A record, the CNAME, then the second A record which would overwrite the first.
     * @param data the DNS wire format records to set
     * @param node the namehash of the node for which to set the records
     */
    "setDNSRecords(bytes32,bytes)"(
      node: Arrayish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Sets the text data associated with an ENS node and key. May only be called by the owner of that node in the ENS registry.
     * @param key The key to set.
     * @param node The node to update.
     * @param value The text data value to set.
     */
    setText(
      node: Arrayish,
      key: string,
      value: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Sets the text data associated with an ENS node and key. May only be called by the owner of that node in the ENS registry.
     * @param key The key to set.
     * @param node The node to update.
     * @param value The text data value to set.
     */
    "setText(bytes32,string,string)"(
      node: Arrayish,
      key: string,
      value: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the address of a contract that implements the specified interface for this name. If an implementer has not been set for this interfaceID and name, the resolver will query the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that contract implements EIP168 and returns `true` for the specified interfaceID, its address will be returned.
     * @param interfaceID The EIP 168 interface ID to check for.
     * @param node The ENS node to query.
     * @returns The address that implements this interface, or 0 if the interface is unsupported.
     */
    interfaceImplementer(
      node: Arrayish,
      interfaceID: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the address of a contract that implements the specified interface for this name. If an implementer has not been set for this interfaceID and name, the resolver will query the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that contract implements EIP168 and returns `true` for the specified interfaceID, its address will be returned.
     * @param interfaceID The EIP 168 interface ID to check for.
     * @param node The ENS node to query.
     * @returns The address that implements this interface, or 0 if the interface is unsupported.
     */
    "interfaceImplementer(bytes32,bytes4)"(
      node: Arrayish,
      interfaceID: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the ABI associated with an ENS node. Defined in EIP205.
     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.
     * @param node The ENS node to query
     * @returns contentType The content type of the return valuedata The ABI data
     */
    ABI(
      node: Arrayish,
      contentTypes: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the ABI associated with an ENS node. Defined in EIP205.
     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.
     * @param node The ENS node to query
     * @returns contentType The content type of the return valuedata The ABI data
     */
    "ABI(bytes32,uint256)"(
      node: Arrayish,
      contentTypes: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Sets the SECP256k1 public key associated with an ENS node.
     * @param node The ENS node to query
     * @param x the X coordinate of the curve point for the public key.
     * @param y the Y coordinate of the curve point for the public key.
     */
    setPubkey(
      node: Arrayish,
      x: Arrayish,
      y: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Sets the SECP256k1 public key associated with an ENS node.
     * @param node The ENS node to query
     * @param x the X coordinate of the curve point for the public key.
     * @param y the Y coordinate of the curve point for the public key.
     */
    "setPubkey(bytes32,bytes32,bytes32)"(
      node: Arrayish,
      x: Arrayish,
      y: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Sets the contenthash associated with an ENS node. May only be called by the owner of that node in the ENS registry.
     * @param hash The contenthash to set
     * @param node The node to update.
     */
    setContenthash(
      node: Arrayish,
      hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Sets the contenthash associated with an ENS node. May only be called by the owner of that node in the ENS registry.
     * @param hash The contenthash to set
     * @param node The node to update.
     */
    "setContenthash(bytes32,bytes)"(
      node: Arrayish,
      hash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the address associated with an ENS node.
     * @param node The ENS node to query.
     * @returns The associated address.
     */
    addr(node: Arrayish, overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Returns the address associated with an ENS node.
     * @param node The ENS node to query.
     * @returns The associated address.
     */
    "addr(bytes32)"(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "addr(bytes32,uint256)"(
      node: Arrayish,
      coinType: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Check if a given node has records.
     * @param name the namehash of the node for which to check the records
     * @param node the namehash of the node for which to check the records
     */
    hasDNSRecords(
      node: Arrayish,
      name: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Check if a given node has records.
     * @param name the namehash of the node for which to check the records
     * @param node the namehash of the node for which to check the records
     */
    "hasDNSRecords(bytes32,bytes32)"(
      node: Arrayish,
      name: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the text data associated with an ENS node and key.
     * @param key The text data key to query.
     * @param node The ENS node to query.
     * @returns The associated text data.
     */
    text(
      node: Arrayish,
      key: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the text data associated with an ENS node and key.
     * @param key The text data key to query.
     * @param node The ENS node to query.
     * @returns The associated text data.
     */
    "text(bytes32,string)"(
      node: Arrayish,
      key: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Sets the ABI associated with an ENS node. Nodes may have one ABI of each content type. To remove an ABI, set it to the empty string.
     * @param contentType The content type of the ABI
     * @param data The ABI data.
     * @param node The node to update.
     */
    setABI(
      node: Arrayish,
      contentType: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Sets the ABI associated with an ENS node. Nodes may have one ABI of each content type. To remove an ABI, set it to the empty string.
     * @param contentType The content type of the ABI
     * @param data The ABI data.
     * @param node The node to update.
     */
    "setABI(bytes32,uint256,bytes)"(
      node: Arrayish,
      contentType: BigNumberish,
      data: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the name associated with an ENS node, for reverse records. Defined in EIP181.
     * @param node The ENS node to query.
     * @returns The associated name.
     */
    name(node: Arrayish, overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Returns the name associated with an ENS node, for reverse records. Defined in EIP181.
     * @param node The ENS node to query.
     * @returns The associated name.
     */
    "name(bytes32)"(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Sets the name associated with an ENS node, for reverse records. May only be called by the owner of that node in the ENS registry.
     * @param name The name to set.
     * @param node The node to update.
     */
    setName(
      node: Arrayish,
      name: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Sets the name associated with an ENS node, for reverse records. May only be called by the owner of that node in the ENS registry.
     * @param name The name to set.
     * @param node The node to update.
     */
    "setName(bytes32,string)"(
      node: Arrayish,
      name: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setAddr(
      node: Arrayish,
      coinType: BigNumberish,
      a: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setAddr(bytes32,uint256,bytes)"(
      node: Arrayish,
      coinType: BigNumberish,
      a: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Sets the address associated with an ENS node. May only be called by the owner of that node in the ENS registry.
     * @param a The address to set.
     * @param node The node to update.
     */
    "setAddr(bytes32,address)"(
      node: Arrayish,
      a: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Obtain a DNS record.
     * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record
     * @param node the namehash of the node for which to fetch the record
     * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types
     * @returns the DNS record in wire format if present, otherwise empty
     */
    dnsRecord(
      node: Arrayish,
      name: Arrayish,
      resource: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Obtain a DNS record.
     * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record
     * @param node the namehash of the node for which to fetch the record
     * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types
     * @returns the DNS record in wire format if present, otherwise empty
     */
    "dnsRecord(bytes32,bytes32,uint16)"(
      node: Arrayish,
      name: Arrayish,
      resource: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Clear all information for a DNS zone.
     * @param node the namehash of the node for which to clear the zone
     */
    clearDNSZone(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Clear all information for a DNS zone.
     * @param node the namehash of the node for which to clear the zone
     */
    "clearDNSZone(bytes32)"(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the contenthash associated with an ENS node.
     * @param node The ENS node to query.
     * @returns The associated contenthash.
     */
    contenthash(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the contenthash associated with an ENS node.
     * @param node The ENS node to query.
     * @returns The associated contenthash.
     */
    "contenthash(bytes32)"(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the SECP256k1 public key associated with an ENS node. Defined in EIP 619.
     * @param node The ENS node to query
     * @returns x, y the X and Y coordinates of the curve point for the public key.
     */
    pubkey(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the SECP256k1 public key associated with an ENS node. Defined in EIP 619.
     * @param node The ENS node to query
     * @returns x, y the X and Y coordinates of the curve point for the public key.
     */
    "pubkey(bytes32)"(
      node: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Sets an interface associated with a name. Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support.
     * @param implementer The address of a contract that implements this interface for this node.
     * @param interfaceID The EIP 168 interface ID.
     * @param node The node to update.
     */
    setInterface(
      node: Arrayish,
      interfaceID: Arrayish,
      implementer: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Sets an interface associated with a name. Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support.
     * @param implementer The address of a contract that implements this interface for this node.
     * @param interfaceID The EIP 168 interface ID.
     * @param node The node to update.
     */
    "setInterface(bytes32,bytes4,address)"(
      node: Arrayish,
      interfaceID: Arrayish,
      implementer: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    authorisations(
      arg0: Arrayish,
      arg1: string,
      arg2: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "authorisations(bytes32,address,address)"(
      arg0: Arrayish,
      arg1: string,
      arg2: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Sets or clears an authorisation. Authorisations are specific to the caller. Any account can set an authorisation for any name, but the authorisation that is checked will be that of the current owner of a name. Thus, transferring a name effectively clears any existing authorisations, and new authorisations can be set in advance of an ownership transfer if desired.
     * @param isAuthorised True if the address should be authorised, or false if it should be deauthorised.
     * @param node The name to change the authorisation on.
     * @param target The address that is to be authorised or deauthorised.
     */
    setAuthorisation(
      node: Arrayish,
      target: string,
      isAuthorised: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Sets or clears an authorisation. Authorisations are specific to the caller. Any account can set an authorisation for any name, but the authorisation that is checked will be that of the current owner of a name. Thus, transferring a name effectively clears any existing authorisations, and new authorisations can be set in advance of an ownership transfer if desired.
     * @param isAuthorised True if the address should be authorised, or false if it should be deauthorised.
     * @param node The name to change the authorisation on.
     * @param target The address that is to be authorised or deauthorised.
     */
    "setAuthorisation(bytes32,address,bool)"(
      node: Arrayish,
      target: string,
      isAuthorised: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    multicall(
      data: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "multicall(bytes[])"(
      data: Arrayish[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
