/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from 'ethers';
import { Listener, Provider } from 'ethers/providers';
import { Arrayish, BigNumber, BigNumberish, Interface } from 'ethers/utils';
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription,
} from '.';

interface EnsRegistryInterface extends Interface {
  functions: {
    setRecord: TypedFunctionDescription<{
      encode([node, owner, resolver, ttl]: [
        Arrayish,
        string,
        string,
        BigNumberish,
      ]): string;
    }>;

    setSubnodeRecord: TypedFunctionDescription<{
      encode([node, label, owner, resolver, ttl]: [
        Arrayish,
        Arrayish,
        string,
        string,
        BigNumberish,
      ]): string;
    }>;

    setOwner: TypedFunctionDescription<{
      encode([node, owner]: [Arrayish, string]): string;
    }>;

    setSubnodeOwner: TypedFunctionDescription<{
      encode([node, label, owner]: [Arrayish, Arrayish, string]): string;
    }>;

    setResolver: TypedFunctionDescription<{
      encode([node, resolver]: [Arrayish, string]): string;
    }>;

    setTTL: TypedFunctionDescription<{
      encode([node, ttl]: [Arrayish, BigNumberish]): string;
    }>;

    setApprovalForAll: TypedFunctionDescription<{
      encode([operator, approved]: [string, boolean]): string;
    }>;

    owner: TypedFunctionDescription<{ encode([node]: [Arrayish]): string }>;

    resolver: TypedFunctionDescription<{ encode([node]: [Arrayish]): string }>;

    ttl: TypedFunctionDescription<{ encode([node]: [Arrayish]): string }>;

    recordExists: TypedFunctionDescription<{
      encode([node]: [Arrayish]): string;
    }>;

    isApprovedForAll: TypedFunctionDescription<{
      encode([owner, operator]: [string, string]): string;
    }>;
  };

  events: {
    ApprovalForAll: TypedEventDescription<{
      encodeTopics([owner, operator, approved]: [
        string | null,
        string | null,
        null,
      ]): string[];
    }>;

    NewOwner: TypedEventDescription<{
      encodeTopics([node, label, owner]: [
        Arrayish | null,
        Arrayish | null,
        null,
      ]): string[];
    }>;

    NewResolver: TypedEventDescription<{
      encodeTopics([node, resolver]: [Arrayish | null, null]): string[];
    }>;

    NewTTL: TypedEventDescription<{
      encodeTopics([node, ttl]: [Arrayish | null, null]): string[];
    }>;

    Transfer: TypedEventDescription<{
      encodeTopics([node, owner]: [Arrayish | null, null]): string[];
    }>;
  };
}

export class EnsRegistry extends Contract {
  connect(signerOrProvider: Signer | Provider | string): EnsRegistry;
  attach(addressOrName: string): EnsRegistry;
  deployed(): Promise<EnsRegistry>;

  on(event: EventFilter | string, listener: Listener): EnsRegistry;
  once(event: EventFilter | string, listener: Listener): EnsRegistry;
  addListener(eventName: EventFilter | string, listener: Listener): EnsRegistry;
  removeAllListeners(eventName: EventFilter | string): EnsRegistry;
  removeListener(eventName: any, listener: Listener): EnsRegistry;

  interface: EnsRegistryInterface;

  functions: {
    /**
     * Sets the record for a node.
     * @param node The node to update.
     * @param owner The address of the new owner.
     * @param resolver The address of the resolver.
     * @param ttl The TTL in seconds.
     */
    setRecord(
      node: Arrayish,
      owner: string,
      resolver: string,
      ttl: BigNumberish,
      overrides?: TransactionOverrides,
    ): Promise<ContractTransaction>;

    /**
     * Sets the record for a node.
     * @param node The node to update.
     * @param owner The address of the new owner.
     * @param resolver The address of the resolver.
     * @param ttl The TTL in seconds.
     */
    'setRecord(bytes32,address,address,uint64)'(
      node: Arrayish,
      owner: string,
      resolver: string,
      ttl: BigNumberish,
      overrides?: TransactionOverrides,
    ): Promise<ContractTransaction>;

    /**
     * Sets the record for a subnode.
     * @param label The hash of the label specifying the subnode.
     * @param node The parent node.
     * @param owner The address of the new owner.
     * @param resolver The address of the resolver.
     * @param ttl The TTL in seconds.
     */
    setSubnodeRecord(
      node: Arrayish,
      label: Arrayish,
      owner: string,
      resolver: string,
      ttl: BigNumberish,
      overrides?: TransactionOverrides,
    ): Promise<ContractTransaction>;

    /**
     * Sets the record for a subnode.
     * @param label The hash of the label specifying the subnode.
     * @param node The parent node.
     * @param owner The address of the new owner.
     * @param resolver The address of the resolver.
     * @param ttl The TTL in seconds.
     */
    'setSubnodeRecord(bytes32,bytes32,address,address,uint64)'(
      node: Arrayish,
      label: Arrayish,
      owner: string,
      resolver: string,
      ttl: BigNumberish,
      overrides?: TransactionOverrides,
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of a node to a new address. May only be called by the current owner of the node.
     * @param node The node to transfer ownership of.
     * @param owner The address of the new owner.
     */
    setOwner(
      node: Arrayish,
      owner: string,
      overrides?: TransactionOverrides,
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of a node to a new address. May only be called by the current owner of the node.
     * @param node The node to transfer ownership of.
     * @param owner The address of the new owner.
     */
    'setOwner(bytes32,address)'(
      node: Arrayish,
      owner: string,
      overrides?: TransactionOverrides,
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of a subnode keccak256(node, label) to a new address. May only be called by the owner of the parent node.
     * @param label The hash of the label specifying the subnode.
     * @param node The parent node.
     * @param owner The address of the new owner.
     */
    setSubnodeOwner(
      node: Arrayish,
      label: Arrayish,
      owner: string,
      overrides?: TransactionOverrides,
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of a subnode keccak256(node, label) to a new address. May only be called by the owner of the parent node.
     * @param label The hash of the label specifying the subnode.
     * @param node The parent node.
     * @param owner The address of the new owner.
     */
    'setSubnodeOwner(bytes32,bytes32,address)'(
      node: Arrayish,
      label: Arrayish,
      owner: string,
      overrides?: TransactionOverrides,
    ): Promise<ContractTransaction>;

    /**
     * Sets the resolver address for the specified node.
     * @param node The node to update.
     * @param resolver The address of the resolver.
     */
    setResolver(
      node: Arrayish,
      resolver: string,
      overrides?: TransactionOverrides,
    ): Promise<ContractTransaction>;

    /**
     * Sets the resolver address for the specified node.
     * @param node The node to update.
     * @param resolver The address of the resolver.
     */
    'setResolver(bytes32,address)'(
      node: Arrayish,
      resolver: string,
      overrides?: TransactionOverrides,
    ): Promise<ContractTransaction>;

    /**
     * Sets the TTL for the specified node.
     * @param node The node to update.
     * @param ttl The TTL in seconds.
     */
    setTTL(
      node: Arrayish,
      ttl: BigNumberish,
      overrides?: TransactionOverrides,
    ): Promise<ContractTransaction>;

    /**
     * Sets the TTL for the specified node.
     * @param node The node to update.
     * @param ttl The TTL in seconds.
     */
    'setTTL(bytes32,uint64)'(
      node: Arrayish,
      ttl: BigNumberish,
      overrides?: TransactionOverrides,
    ): Promise<ContractTransaction>;

    /**
     * Enable or disable approval for a third party ("operator") to manage all of `msg.sender`'s ENS records. Emits the ApprovalForAll event.
     * @param approved True if the operator is approved, false to revoke approval.
     * @param operator Address to add to the set of authorized operators.
     */
    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: TransactionOverrides,
    ): Promise<ContractTransaction>;

    /**
     * Enable or disable approval for a third party ("operator") to manage all of `msg.sender`'s ENS records. Emits the ApprovalForAll event.
     * @param approved True if the operator is approved, false to revoke approval.
     * @param operator Address to add to the set of authorized operators.
     */
    'setApprovalForAll(address,bool)'(
      operator: string,
      approved: boolean,
      overrides?: TransactionOverrides,
    ): Promise<ContractTransaction>;

    /**
     * Returns the address that owns the specified node.
     * @param node The specified node.
     * @returns address of the owner.
     */
    owner(node: Arrayish, overrides?: TransactionOverrides): Promise<string>;

    /**
     * Returns the address that owns the specified node.
     * @param node The specified node.
     * @returns address of the owner.
     */
    'owner(bytes32)'(
      node: Arrayish,
      overrides?: TransactionOverrides,
    ): Promise<string>;

    /**
     * Returns the address of the resolver for the specified node.
     * @param node The specified node.
     * @returns address of the resolver.
     */
    resolver(node: Arrayish, overrides?: TransactionOverrides): Promise<string>;

    /**
     * Returns the address of the resolver for the specified node.
     * @param node The specified node.
     * @returns address of the resolver.
     */
    'resolver(bytes32)'(
      node: Arrayish,
      overrides?: TransactionOverrides,
    ): Promise<string>;

    /**
     * Returns the TTL of a node, and any records associated with it.
     * @param node The specified node.
     * @returns ttl of the node.
     */
    ttl(node: Arrayish, overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Returns the TTL of a node, and any records associated with it.
     * @param node The specified node.
     * @returns ttl of the node.
     */
    'ttl(bytes32)'(
      node: Arrayish,
      overrides?: TransactionOverrides,
    ): Promise<BigNumber>;

    /**
     * Returns whether a record has been imported to the registry.
     * @param node The specified node.
     * @returns Bool if record exists
     */
    recordExists(
      node: Arrayish,
      overrides?: TransactionOverrides,
    ): Promise<boolean>;

    /**
     * Returns whether a record has been imported to the registry.
     * @param node The specified node.
     * @returns Bool if record exists
     */
    'recordExists(bytes32)'(
      node: Arrayish,
      overrides?: TransactionOverrides,
    ): Promise<boolean>;

    /**
     * Query if an address is an authorized operator for another address.
     * @param operator The address that acts on behalf of the owner.
     * @param owner The address that owns the records.
     * @returns True if `operator` is an approved operator for `owner`, false otherwise.
     */
    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: TransactionOverrides,
    ): Promise<boolean>;

    /**
     * Query if an address is an authorized operator for another address.
     * @param operator The address that acts on behalf of the owner.
     * @param owner The address that owns the records.
     * @returns True if `operator` is an approved operator for `owner`, false otherwise.
     */
    'isApprovedForAll(address,address)'(
      owner: string,
      operator: string,
      overrides?: TransactionOverrides,
    ): Promise<boolean>;
  };

  /**
   * Sets the record for a node.
   * @param node The node to update.
   * @param owner The address of the new owner.
   * @param resolver The address of the resolver.
   * @param ttl The TTL in seconds.
   */
  setRecord(
    node: Arrayish,
    owner: string,
    resolver: string,
    ttl: BigNumberish,
    overrides?: TransactionOverrides,
  ): Promise<ContractTransaction>;

  /**
   * Sets the record for a node.
   * @param node The node to update.
   * @param owner The address of the new owner.
   * @param resolver The address of the resolver.
   * @param ttl The TTL in seconds.
   */
  'setRecord(bytes32,address,address,uint64)'(
    node: Arrayish,
    owner: string,
    resolver: string,
    ttl: BigNumberish,
    overrides?: TransactionOverrides,
  ): Promise<ContractTransaction>;

  /**
   * Sets the record for a subnode.
   * @param label The hash of the label specifying the subnode.
   * @param node The parent node.
   * @param owner The address of the new owner.
   * @param resolver The address of the resolver.
   * @param ttl The TTL in seconds.
   */
  setSubnodeRecord(
    node: Arrayish,
    label: Arrayish,
    owner: string,
    resolver: string,
    ttl: BigNumberish,
    overrides?: TransactionOverrides,
  ): Promise<ContractTransaction>;

  /**
   * Sets the record for a subnode.
   * @param label The hash of the label specifying the subnode.
   * @param node The parent node.
   * @param owner The address of the new owner.
   * @param resolver The address of the resolver.
   * @param ttl The TTL in seconds.
   */
  'setSubnodeRecord(bytes32,bytes32,address,address,uint64)'(
    node: Arrayish,
    label: Arrayish,
    owner: string,
    resolver: string,
    ttl: BigNumberish,
    overrides?: TransactionOverrides,
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of a node to a new address. May only be called by the current owner of the node.
   * @param node The node to transfer ownership of.
   * @param owner The address of the new owner.
   */
  setOwner(
    node: Arrayish,
    owner: string,
    overrides?: TransactionOverrides,
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of a node to a new address. May only be called by the current owner of the node.
   * @param node The node to transfer ownership of.
   * @param owner The address of the new owner.
   */
  'setOwner(bytes32,address)'(
    node: Arrayish,
    owner: string,
    overrides?: TransactionOverrides,
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of a subnode keccak256(node, label) to a new address. May only be called by the owner of the parent node.
   * @param label The hash of the label specifying the subnode.
   * @param node The parent node.
   * @param owner The address of the new owner.
   */
  setSubnodeOwner(
    node: Arrayish,
    label: Arrayish,
    owner: string,
    overrides?: TransactionOverrides,
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of a subnode keccak256(node, label) to a new address. May only be called by the owner of the parent node.
   * @param label The hash of the label specifying the subnode.
   * @param node The parent node.
   * @param owner The address of the new owner.
   */
  'setSubnodeOwner(bytes32,bytes32,address)'(
    node: Arrayish,
    label: Arrayish,
    owner: string,
    overrides?: TransactionOverrides,
  ): Promise<ContractTransaction>;

  /**
   * Sets the resolver address for the specified node.
   * @param node The node to update.
   * @param resolver The address of the resolver.
   */
  setResolver(
    node: Arrayish,
    resolver: string,
    overrides?: TransactionOverrides,
  ): Promise<ContractTransaction>;

  /**
   * Sets the resolver address for the specified node.
   * @param node The node to update.
   * @param resolver The address of the resolver.
   */
  'setResolver(bytes32,address)'(
    node: Arrayish,
    resolver: string,
    overrides?: TransactionOverrides,
  ): Promise<ContractTransaction>;

  /**
   * Sets the TTL for the specified node.
   * @param node The node to update.
   * @param ttl The TTL in seconds.
   */
  setTTL(
    node: Arrayish,
    ttl: BigNumberish,
    overrides?: TransactionOverrides,
  ): Promise<ContractTransaction>;

  /**
   * Sets the TTL for the specified node.
   * @param node The node to update.
   * @param ttl The TTL in seconds.
   */
  'setTTL(bytes32,uint64)'(
    node: Arrayish,
    ttl: BigNumberish,
    overrides?: TransactionOverrides,
  ): Promise<ContractTransaction>;

  /**
   * Enable or disable approval for a third party ("operator") to manage all of `msg.sender`'s ENS records. Emits the ApprovalForAll event.
   * @param approved True if the operator is approved, false to revoke approval.
   * @param operator Address to add to the set of authorized operators.
   */
  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: TransactionOverrides,
  ): Promise<ContractTransaction>;

  /**
   * Enable or disable approval for a third party ("operator") to manage all of `msg.sender`'s ENS records. Emits the ApprovalForAll event.
   * @param approved True if the operator is approved, false to revoke approval.
   * @param operator Address to add to the set of authorized operators.
   */
  'setApprovalForAll(address,bool)'(
    operator: string,
    approved: boolean,
    overrides?: TransactionOverrides,
  ): Promise<ContractTransaction>;

  /**
   * Returns the address that owns the specified node.
   * @param node The specified node.
   * @returns address of the owner.
   */
  owner(node: Arrayish, overrides?: TransactionOverrides): Promise<string>;

  /**
   * Returns the address that owns the specified node.
   * @param node The specified node.
   * @returns address of the owner.
   */
  'owner(bytes32)'(
    node: Arrayish,
    overrides?: TransactionOverrides,
  ): Promise<string>;

  /**
   * Returns the address of the resolver for the specified node.
   * @param node The specified node.
   * @returns address of the resolver.
   */
  resolver(node: Arrayish, overrides?: TransactionOverrides): Promise<string>;

  /**
   * Returns the address of the resolver for the specified node.
   * @param node The specified node.
   * @returns address of the resolver.
   */
  'resolver(bytes32)'(
    node: Arrayish,
    overrides?: TransactionOverrides,
  ): Promise<string>;

  /**
   * Returns the TTL of a node, and any records associated with it.
   * @param node The specified node.
   * @returns ttl of the node.
   */
  ttl(node: Arrayish, overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * Returns the TTL of a node, and any records associated with it.
   * @param node The specified node.
   * @returns ttl of the node.
   */
  'ttl(bytes32)'(
    node: Arrayish,
    overrides?: TransactionOverrides,
  ): Promise<BigNumber>;

  /**
   * Returns whether a record has been imported to the registry.
   * @param node The specified node.
   * @returns Bool if record exists
   */
  recordExists(
    node: Arrayish,
    overrides?: TransactionOverrides,
  ): Promise<boolean>;

  /**
   * Returns whether a record has been imported to the registry.
   * @param node The specified node.
   * @returns Bool if record exists
   */
  'recordExists(bytes32)'(
    node: Arrayish,
    overrides?: TransactionOverrides,
  ): Promise<boolean>;

  /**
   * Query if an address is an authorized operator for another address.
   * @param operator The address that acts on behalf of the owner.
   * @param owner The address that owns the records.
   * @returns True if `operator` is an approved operator for `owner`, false otherwise.
   */
  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: TransactionOverrides,
  ): Promise<boolean>;

  /**
   * Query if an address is an authorized operator for another address.
   * @param operator The address that acts on behalf of the owner.
   * @param owner The address that owns the records.
   * @returns True if `operator` is an approved operator for `owner`, false otherwise.
   */
  'isApprovedForAll(address,address)'(
    owner: string,
    operator: string,
    overrides?: TransactionOverrides,
  ): Promise<boolean>;

  filters: {
    ApprovalForAll(
      owner: string | null,
      operator: string | null,
      approved: null,
    ): EventFilter;

    NewOwner(
      node: Arrayish | null,
      label: Arrayish | null,
      owner: null,
    ): EventFilter;

    NewResolver(node: Arrayish | null, resolver: null): EventFilter;

    NewTTL(node: Arrayish | null, ttl: null): EventFilter;

    Transfer(node: Arrayish | null, owner: null): EventFilter;
  };

  estimate: {
    /**
     * Sets the record for a node.
     * @param node The node to update.
     * @param owner The address of the new owner.
     * @param resolver The address of the resolver.
     * @param ttl The TTL in seconds.
     */
    setRecord(
      node: Arrayish,
      owner: string,
      resolver: string,
      ttl: BigNumberish,
      overrides?: TransactionOverrides,
    ): Promise<BigNumber>;

    /**
     * Sets the record for a node.
     * @param node The node to update.
     * @param owner The address of the new owner.
     * @param resolver The address of the resolver.
     * @param ttl The TTL in seconds.
     */
    'setRecord(bytes32,address,address,uint64)'(
      node: Arrayish,
      owner: string,
      resolver: string,
      ttl: BigNumberish,
      overrides?: TransactionOverrides,
    ): Promise<BigNumber>;

    /**
     * Sets the record for a subnode.
     * @param label The hash of the label specifying the subnode.
     * @param node The parent node.
     * @param owner The address of the new owner.
     * @param resolver The address of the resolver.
     * @param ttl The TTL in seconds.
     */
    setSubnodeRecord(
      node: Arrayish,
      label: Arrayish,
      owner: string,
      resolver: string,
      ttl: BigNumberish,
      overrides?: TransactionOverrides,
    ): Promise<BigNumber>;

    /**
     * Sets the record for a subnode.
     * @param label The hash of the label specifying the subnode.
     * @param node The parent node.
     * @param owner The address of the new owner.
     * @param resolver The address of the resolver.
     * @param ttl The TTL in seconds.
     */
    'setSubnodeRecord(bytes32,bytes32,address,address,uint64)'(
      node: Arrayish,
      label: Arrayish,
      owner: string,
      resolver: string,
      ttl: BigNumberish,
      overrides?: TransactionOverrides,
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of a node to a new address. May only be called by the current owner of the node.
     * @param node The node to transfer ownership of.
     * @param owner The address of the new owner.
     */
    setOwner(
      node: Arrayish,
      owner: string,
      overrides?: TransactionOverrides,
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of a node to a new address. May only be called by the current owner of the node.
     * @param node The node to transfer ownership of.
     * @param owner The address of the new owner.
     */
    'setOwner(bytes32,address)'(
      node: Arrayish,
      owner: string,
      overrides?: TransactionOverrides,
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of a subnode keccak256(node, label) to a new address. May only be called by the owner of the parent node.
     * @param label The hash of the label specifying the subnode.
     * @param node The parent node.
     * @param owner The address of the new owner.
     */
    setSubnodeOwner(
      node: Arrayish,
      label: Arrayish,
      owner: string,
      overrides?: TransactionOverrides,
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of a subnode keccak256(node, label) to a new address. May only be called by the owner of the parent node.
     * @param label The hash of the label specifying the subnode.
     * @param node The parent node.
     * @param owner The address of the new owner.
     */
    'setSubnodeOwner(bytes32,bytes32,address)'(
      node: Arrayish,
      label: Arrayish,
      owner: string,
      overrides?: TransactionOverrides,
    ): Promise<BigNumber>;

    /**
     * Sets the resolver address for the specified node.
     * @param node The node to update.
     * @param resolver The address of the resolver.
     */
    setResolver(
      node: Arrayish,
      resolver: string,
      overrides?: TransactionOverrides,
    ): Promise<BigNumber>;

    /**
     * Sets the resolver address for the specified node.
     * @param node The node to update.
     * @param resolver The address of the resolver.
     */
    'setResolver(bytes32,address)'(
      node: Arrayish,
      resolver: string,
      overrides?: TransactionOverrides,
    ): Promise<BigNumber>;

    /**
     * Sets the TTL for the specified node.
     * @param node The node to update.
     * @param ttl The TTL in seconds.
     */
    setTTL(
      node: Arrayish,
      ttl: BigNumberish,
      overrides?: TransactionOverrides,
    ): Promise<BigNumber>;

    /**
     * Sets the TTL for the specified node.
     * @param node The node to update.
     * @param ttl The TTL in seconds.
     */
    'setTTL(bytes32,uint64)'(
      node: Arrayish,
      ttl: BigNumberish,
      overrides?: TransactionOverrides,
    ): Promise<BigNumber>;

    /**
     * Enable or disable approval for a third party ("operator") to manage all of `msg.sender`'s ENS records. Emits the ApprovalForAll event.
     * @param approved True if the operator is approved, false to revoke approval.
     * @param operator Address to add to the set of authorized operators.
     */
    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: TransactionOverrides,
    ): Promise<BigNumber>;

    /**
     * Enable or disable approval for a third party ("operator") to manage all of `msg.sender`'s ENS records. Emits the ApprovalForAll event.
     * @param approved True if the operator is approved, false to revoke approval.
     * @param operator Address to add to the set of authorized operators.
     */
    'setApprovalForAll(address,bool)'(
      operator: string,
      approved: boolean,
      overrides?: TransactionOverrides,
    ): Promise<BigNumber>;

    /**
     * Returns the address that owns the specified node.
     * @param node The specified node.
     * @returns address of the owner.
     */
    owner(node: Arrayish, overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Returns the address that owns the specified node.
     * @param node The specified node.
     * @returns address of the owner.
     */
    'owner(bytes32)'(
      node: Arrayish,
      overrides?: TransactionOverrides,
    ): Promise<BigNumber>;

    /**
     * Returns the address of the resolver for the specified node.
     * @param node The specified node.
     * @returns address of the resolver.
     */
    resolver(
      node: Arrayish,
      overrides?: TransactionOverrides,
    ): Promise<BigNumber>;

    /**
     * Returns the address of the resolver for the specified node.
     * @param node The specified node.
     * @returns address of the resolver.
     */
    'resolver(bytes32)'(
      node: Arrayish,
      overrides?: TransactionOverrides,
    ): Promise<BigNumber>;

    /**
     * Returns the TTL of a node, and any records associated with it.
     * @param node The specified node.
     * @returns ttl of the node.
     */
    ttl(node: Arrayish, overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Returns the TTL of a node, and any records associated with it.
     * @param node The specified node.
     * @returns ttl of the node.
     */
    'ttl(bytes32)'(
      node: Arrayish,
      overrides?: TransactionOverrides,
    ): Promise<BigNumber>;

    /**
     * Returns whether a record has been imported to the registry.
     * @param node The specified node.
     * @returns Bool if record exists
     */
    recordExists(
      node: Arrayish,
      overrides?: TransactionOverrides,
    ): Promise<BigNumber>;

    /**
     * Returns whether a record has been imported to the registry.
     * @param node The specified node.
     * @returns Bool if record exists
     */
    'recordExists(bytes32)'(
      node: Arrayish,
      overrides?: TransactionOverrides,
    ): Promise<BigNumber>;

    /**
     * Query if an address is an authorized operator for another address.
     * @param operator The address that acts on behalf of the owner.
     * @param owner The address that owns the records.
     * @returns True if `operator` is an approved operator for `owner`, false otherwise.
     */
    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: TransactionOverrides,
    ): Promise<BigNumber>;

    /**
     * Query if an address is an authorized operator for another address.
     * @param operator The address that acts on behalf of the owner.
     * @param owner The address that owns the records.
     * @returns True if `operator` is an approved operator for `owner`, false otherwise.
     */
    'isApprovedForAll(address,address)'(
      owner: string,
      operator: string,
      overrides?: TransactionOverrides,
    ): Promise<BigNumber>;
  };
}
